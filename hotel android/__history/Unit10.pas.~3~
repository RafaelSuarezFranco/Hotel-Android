unit Unit10;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Objects,  System.Math,
  FMX.StdCtrls, FMX.Controls.Presentation,  IdSSLOpenSSL, IdMessage, IdBaseComponent, IdComponent, IdTCPConnection,
  IdTCPClient, IdExplicitTLSClientServerBase, IdMessageClient, IdSMTPBase,
   Data.DB, Vcl.Mask, IdIOHandler, IdIOHandlerSocket, IdIOHandlerStack, IdSSL,
 // IdSSLOpenSSL, IdMessage, IdBaseComponent, IdComponent, IdTCPConnection,
  IdSMTP, FMX.Edit
  ;

type
  TAltaUsuario = class(TForm)
    Rectangle1: TRectangle;
    Label4: TLabel;
    SpeedButton3: TSpeedButton;
    Image3: TImage;
    IdSSLIOHandlerSocketOpenSSL1: TIdSSLIOHandlerSocketOpenSSL;
    IdMessage1: TIdMessage;
    IdSMTP1: TIdSMTP;
    Edit1: TEdit;
    Edit2: TEdit;
    Edit3: TEdit;
    Edit4: TEdit;
    Label2: TLabel;
    Label1: TLabel;
    Label3: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Edit5: TEdit;
    Edit6: TEdit;
    Edit7: TEdit;
    Label7: TLabel;
    Label8: TLabel;
    Button1: TButton;
    Edit8: TEdit;
    Label9: TLabel;
    Button2: TButton;
    procedure SpeedButton3Click(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  AltaUsuario: TAltaUsuario;

  codigoVerificacion : string;

implementation

{$R *.fmx}

uses
 Unit3;

procedure TAltaUsuario.Button1Click(Sender: TObject);
var
clienteValido: boolean;
clienteTieneUsuario: boolean; //no queremos que un cliente tenga varios usuarios.
registroValido: boolean;
correoValido: boolean;

codigoInput: string;
begin
  IdMessage1.Clear;

// IO HANDLER SETTINGS //
  With IdSSLIOHandlerSocketOpenSSL1 do
  begin

    Destination := 'smtp.gmail.com:587';
    Host := 'smtp.gmail.com';
    //MaxLineAction := maException;
    Port := 587;
    //SSLOptions.Method := sslvTLSv1;
    SSLOptions.SSLVersions := [sslvTLSv1, sslvTLSv1_1, sslvTLSv1_2];
    SSLOptions.Mode := sslmUnassigned;
    SSLOptions.VerifyMode := [];
    SSLOptions.VerifyDepth := 0;
  end;
//SETTING SMTP COMPONENT DATA //
  IdSMTP1.Host := 'smtp.gmail.com';
  IdSMTP1.Port := 587;
  IdSMTP1.Username := 'hotelrafaelsuarezfranco@gmail.com'; // please change to your gmail address //
  IdSMTP1.Password := 'hotelrsf127';
  IdSMTP1.IOHandler := IdSSLIOHandlerSocketOpenSSL1;
  //IdSMTP1.AuthType := satDefault;
  IdSMTP1.UseTLS := utUseExplicitTLS;

  registroValido := true;
  clienteValido := false;
  clienteTieneUsuario := false;

  Tablas.MyQuery1.Close;
  Tablas.MyQuery1.SQL.Text := 'select * from usuarios where cliente='+quotedstr(Edit3.Text);
  Tablas.MyQuery1.Open;

   if Tablas.MyQuery1.RecordCount > 0 then
    begin
      showmessage('El cliente especificado ya tiene un usuario en el sistema.');
      clienteTieneUsuario := true;
      registroValido := false;
    end;


  if (Edit1.Text = '') or (Edit2.Text = '') or (Edit3.Text = '') or
    (Edit6.Text = '') or (Edit7.Text = '') or (Edit8.Text = '') then
  begin
    showmessage('Por favor, rellena todos los campos');
    registroValido := false;
  end
  else
  begin

    //GESTION CLIENTE


  if(clienteTieneUsuario = false) then
    begin
     //si sabemos que no tiene usuario y que hemos introducido un cliente válido (ya sea creado o no) entonces seguimos.

    if (clienteValido = true) then
      begin

      //validar formato de correo.
        correoValido := Tablas.emailFormatoValido(Edit1.Text);
         if not correoValido then
          begin
            showmessage('El formato del correo no es válido.');
            registroValido := false;
          end;

      //validar si el correo o el usuario están repetidos.

        Tablas.MyQuery1.Close;
        Tablas.MyQuery1.SQL.Text := 'select * from usuarios where correo='+quotedstr(Edit1.Text);
        Tablas.MyQuery1.Open;

         if Tablas.MyQuery1.RecordCount > 0 then
          begin
            showmessage('Ya existe un usuario con el correo introducido.');
            registroValido := false;
          end;


        Tablas.MyQuery1.Close;
        Tablas.MyQuery1.SQL.Text := 'select * from usuarios where usuario='+quotedstr(Edit2.Text);
        Tablas.MyQuery1.Open;

         if Tablas.MyQuery1.RecordCount > 0 then
          begin
            showmessage('Ya existe un usuario con el nombre de usuario introducido.');
            registroValido := false;
          end;

      //comprobar que las contraseñas coinciden.
      if Edit6.Text <> Edit7.Text then
        begin
          showmessage('Las contraseñas no coinciden.');
          registroValido := false;
        end;

      end else
      begin
          //si no aceptamos crear un nuevo usuario (necesario).
         showmessage('Acción cancelada. No se puede completar la reserva con el identificador de un cliente inexistente');
         registroValido := false;
      end;

    end else
    begin
       registroValido := false;
    end;


  end;

  if registroValido then
    begin

          codigoVerificacion := inttostr(RandomRange(100000, 999999));

          IdMessage1.From.Address :=  'hotelrafaelsuarezfranco@gmail.com';
          IdMessage1.Recipients.EMailAddresses := Edit1.Text;
          IdMessage1.Subject := 'Confirmar cuenta de Hotel RSF';
          IdMessage1.Body.Text := 'Bienvenido al Hotel RSF, '+Edit2.Text+'. Su código de verificación es: '+codigoVerificacion;


          TRY
            IdSMTP1.Connect();
            IdSMTP1.Send(IdMessage1);
            //ShowMessage('Email sent');

            while codigoInput <> codigoVerificacion do
              begin
                codigoInput := inputbox('Introduzca el código de verificación', 'Hemos mandado un código a su correo.', '');
              end;

            if codigoInput = codigoVerificacion then
              begin
                Tablas.MyTableUsuariospassword.value:= Tablas.passwordHash(Edit1.Text);

                Tablas.MyTableUsuarios.Post;
                showmessage('Usuario creado con éxito.');
                AltaUsuario.Close;

              end;


            IdSMTP1.Disconnect();
          except on e:Exception do
            begin
              ShowMessage(e.Message);
              IdSMTP1.Disconnect();
            end;
          END;


    end;


end;

procedure TAltaUsuario.Button2Click(Sender: TObject);
var
clienteValido: boolean;
clienteTieneUsuario: boolean;
registroValido: boolean;
correoValido: boolean;

codigoInput: string;
begin
  IdMessage1.Clear;

// IO HANDLER SETTINGS //
  With IdSSLIOHandlerSocketOpenSSL1 do
  begin

   // Destination := 'smtp.gmail.com:587';
   // Host := 'smtp.gmail.com';
   // MaxLineAction := maException;
   // Port := 587;
    SSLOptions.Method := sslvTLSv1;
    SSLOptions.SSLVersions := [sslvTLSv1, sslvTLSv1_1, sslvTLSv1_2];
    //SSLOptions.Method := sslvSSLv3;
    SSLOptions.Mode := sslmClient;//sslmUnassigned;
    SSLOptions.VerifyMode := [];
    SSLOptions.VerifyDepth := 0;
  end;
//SETTING SMTP COMPONENT DATA //

  IdSMTP1.Host := 'smtp.gmail.com';
  IdSMTP1.Port := 587;
  IdSMTP1.Username := 'hotelrafaelsuarezfranco@gmail.com';
  IdSMTP1.Password := 'hotelrsf127';
  IdSMTP1.IOHandler := IdSSLIOHandlerSocketOpenSSL1;
  //IdSMTP1.AuthType := satDefault;
IdSMTP1.UseTLS := utUseExplicitTLS;

  //validar formato de correo.
  correoValido := Tablas.emailFormatoValido(Edit1.Text);
  if not correoValido then
      begin
         showmessage('El formato del correo no es válido.');
         registroValido := false;
      end else
      begin
        registroValido := true;
      end;


  if registroValido then
    begin

          codigoVerificacion := inttostr(RandomRange(100000, 999999));

          IdMessage1.From.Address :=  'hotelrafaelsuarezfranco@gmail.com';
          IdMessage1.Recipients.EMailAddresses := 'mildoscientosveintisiete1227@gmail.com';//Edit1.Text;
          IdMessage1.Subject := 'Confirmar cuenta de Hotel RSF';
          IdMessage1.Body.Text := 'Bienvenido al Hotel RSF, ';//+Edit2.Text+'. Su código de verificación es: '+codigoVerificacion;


          TRY
            IdSMTP1.Connect();
            IdSMTP1.Send(IdMessage1);
            ShowMessage('Se ha enviado el código al correo especificado.');


            IdSMTP1.Disconnect();
          except on e:Exception do
            begin
              ShowMessage(e.Message);
              IdSMTP1.Disconnect();
            end;
          END;


    end;


    if edit1.Text = '' then
      begin
          Showmessage('Para obtener el código de verificación, introduzca un correo válido y pulse "obtener código".');
      end;
end;

procedure TAltaUsuario.FormActivate(Sender: TObject);
begin

  codigoVerificacion := 'xxxxxxxxxxxxxxxxx';
end;

procedure TAltaUsuario.SpeedButton3Click(Sender: TObject);
begin
  AltaUsuario.Close;
end;

end.
